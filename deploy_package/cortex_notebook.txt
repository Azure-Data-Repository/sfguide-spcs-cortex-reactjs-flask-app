
>>>> Python Cell <<<<

# Streamlit
import streamlit as st

# Snowpark
from snowflake.snowpark.context import get_active_session
session = get_active_session()

>>>> SQL Cell <<<<

select country,transcript from call_transcripts;

>>>> Python Cell <<<<

df = session.sql("""
select country,count(*) as total_transcripts from call_transcripts 
group by country order by total_transcripts desc""")
st.bar_chart(data=df,x='COUNTRY',y='TOTAL_TRANSCRIPTS')

>>>> SQL Cell <<<<

select transcript, (select snowflake.ml.translate(t.transcript,'de_DE','en_XX')) as Translation from call_transcripts t where language = 'German' limit 10;

>>>> SQL Cell <<<<

select snowflake.ml.summarize(select transcript from call_transcripts where language = 'English' limit 1) as summary;

>>>> Python Cell <<<<

prompt = \
"""### 
Summarize this transcript in less than 200 words. 
Put the product name, defect and summary in JSON format. 
###
"""
sql = f"select snowflake.ml.complete('llama2-70b-chat', \
(select concat('[INST]','{prompt}',transcript,'[/INST]') from transcripts \
where language = 'English' limit 1)) as response"
summary = session.sql(sql).to_pandas().iloc[0][0]
st.json(summary)

>>>> SQL Cell <<<<

select * from wiki;

>>>> SQL Cell <<<<

create or replace table wiki_retrieval as select content, snowflake.ml.embed_text('e5-base-v2', content) as content_embedding from wiki;

>>>> SQL Cell <<<<

select snowflake.ml.complete(
    'llama2-70b-chat', 
    concat( 
        'Answer the question based on the context. Be concise.','Context: ',
        (
            select content from wiki_retrieval 
            order by vector_l2_distance(
            snowflake.ml.embed_text('e5-base-v2', 
            'Who are the suppliers of Skimax Pro 9000?'
            ), content_embedding
            ) limit 1
        ),
        'Question: ', 
        'Who are the suppliers of Skimax Pro 9000?',
        'Answer: '
    )
) as response;
